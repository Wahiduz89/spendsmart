// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with support for multiple auth providers
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts               Account[]
  expenses               Expense[]
  categories             Category[]
  budgets                Budget[]
  subscription           Subscription?
  notifications          Notification[]
  notificationPreference NotificationPreference?

  @@index([email])
}

// OAuth account connections
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Expense entries with receipt support
model Expense {
  id            String         @id @default(cuid())
  userId        String
  amount        Float
  description   String
  date          DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Payment method
  paymentMethod PaymentMethod  @default(CASH)
  
  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  category      Category?      @relation(fields: [categoryId], references: [id])
  categoryId    String?
  
  // Optional fields
  merchant      String?
  receiptUrl    String?        // URL to uploaded receipt image
  notes         String?
  
  @@index([userId, date])
  @@index([categoryId])
  @@index([merchant])
}

// Expense categories
model Category {
  id          String    @id @default(cuid())
  userId      String
  name        String
  icon        String?
  color       String?
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  budgets     Budget[]
  
  @@unique([userId, name])
  @@index([userId])
}

// Budget management
model Budget {
  id          String      @id @default(cuid())
  userId      String
  categoryId  String?
  amount      Float
  period      BudgetPeriod @default(MONTHLY)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id])
  
  @@index([userId, startDate, endDate])
  @@index([categoryId])
}

// Subscription management
model Subscription {
  id               String    @id @default(cuid())
  userId           String    @unique
  plan             PlanType  @default(FREE)
  status           String    @default("active")
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Notification model for alerts and updates
model Notification {
  id          String               @id @default(cuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  priority    NotificationPriority @default(MEDIUM)
  isRead      Boolean             @default(false)
  readAt      DateTime?
  relatedId   String?             // ID of related entity (expense, budget, etc.)
  relatedType String?             // Type of related entity
  metadata    Json?               // Additional data for the notification
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
}

// User notification preferences
model NotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  budgetAlerts      Boolean  @default(true)
  budgetThreshold   Int      @default(80) // Alert when budget reaches this %
  dailyDigest       Boolean  @default(false)
  weeklyReport      Boolean  @default(true)
  expenseReminders  Boolean  @default(true)
  emailAlerts       Boolean  @default(true)
  pushAlerts        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  UPI
  WALLET
  NET_BANKING
  OTHER
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PlanType {
  FREE
  PREMIUM
  ENTERPRISE
}

enum NotificationType {
  BUDGET_WARNING      // Budget reaching threshold
  BUDGET_EXCEEDED     // Budget exceeded
  EXPENSE_REMINDER    // Reminder to track expenses
  WEEKLY_SUMMARY      // Weekly spending summary
  MONTHLY_SUMMARY     // Monthly spending summary
  ACHIEVEMENT         // Spending goal achieved
  SYSTEM              // System notifications
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}